#!/usr/bin/env opsh
# -*- mode: sh; sh-shell: bash -*-
# shellcheck shell=bash disable=SC2164

opsh::version::require v0.7.0

lib::import step-runner command
lib::import test-harness

: "${PULUMI_COLOR:=always}"
: "${BRING_UP_STACK:=true}"
: "${NODE_COUNT:=1}"

: "${GOOGLE_PROJECT:=svmkit}"
: "${GOOGLE_REGION:=us-central1}"
: "${GOOGLE_ZONE:=${GOOGLE_REGION}-a}"

export GOOGLE_PROJECT GOOGLE_REGION GOOGLE_ZONE

check-set-dir() {
    local var=$1
    shift

    [[ -v $var ]] || log::fatal "$var must be set"

    declare -n ref="$var"
    ref="$(realpath "${ref}")"
    [[ -d $ref ]] || log::fatal "$var must be a directory"
}

pulumi::run() {
    PATH=$PULUMI_SVMKIT_DIR/bin:$PATH pulumi --color="$PULUMI_COLOR" "$@"
}

# if command::exists pulumi-resource-svmkit; then
#     log::fatal "a local pulumi-resource-svmkit provider is in your PATH, and that's bad"
# fi

for i in SVMKIT_DIR PULUMI_SVMKIT_DIR SVMKIT_EXAMPLES_DIR; do
    check-set-dir $i
    log::info $i=${!i}
done

step::010::setup-svmkit() {
    (cd "$SVMKIT_DIR") #  && make check)
}

step::020::setup-pulumi-svmkit() {
    (cd "$PULUMI_SVMKIT_DIR/provider" && go mod edit -replace github.com/abklabs/svmkit/pkg="$SVMKIT_DIR/pkg")
}

step::030::build-pulumi-svmkit() {
    (cd "$PULUMI_SVMKIT_DIR" && make )
}

example::setup::ts() {
    (
	rm -rf node_modules && pulumi::run install
	yarn link "@svmkit/pulumi-svmkit"
	pulumi::run config set node:count "$NODE_COUNT"
    )
    
}

example::cleanup::ts() {
    (
        rm -rf node_modules
    )
}

example::setup::py() {
    (
        rm -rf venv && pulumi::run install
        ./venv/bin/pip install "$PULUMI_SVMKIT_DIR"/sdk/python/bin/dist/pulumi_svmkit-*.tar.gz
    )
    
}

example::cleanup::py() {
    (
        rm -rf venv

    )
}

example::test::temp() {
        log::info "✅ Temp TEST"
    return 0
}
example::test::ufw_status_allows_expected_ports() {
    local output
    
    output=$(./ssh-to-host 0 -o BatchMode=yes -n "sudo ufw status") || {
        echo "❌ Command failed"
        return 1
    }
    
    expected_lines=(
        "22/tcp                     ALLOW       Anywhere"
        "53                         ALLOW       Anywhere"
        "8000:8020/tcp              ALLOW       Anywhere"
        "8000:8020/udp              ALLOW       Anywhere"
        "8899                       ALLOW       Anywhere"
        "8900/tcp                   ALLOW       Anywhere"
        "22/tcp (v6)                ALLOW       Anywhere (v6)"
        "53 (v6)                    ALLOW       Anywhere (v6)"
        "8000:8020/tcp (v6)         ALLOW       Anywhere (v6)"
        "8000:8020/udp (v6)         ALLOW       Anywhere (v6)"
        "8899 (v6)                  ALLOW       Anywhere (v6)"
        "8900/tcp (v6)              ALLOW       Anywhere (v6)"
    )


    local missing=0
    for line in "${expected_lines[@]}"; do
        if ! grep -Fq "$line" <<< "$output"; then
            log::error "❌ Missing expected rule: '$line'"
            missing=1
        fi
    done

    if [[ $missing -eq 0 ]]; then
        log::info "✅ All expected UFW rules are present."
        return 0
    else
        log::error "❌ Some expected UFW rules are missing."
        return 1
    fi
}

example::test::journal_logging() {
    local output
    # grab the journal entries for the service
    output=$(./ssh-to-host 0 "journalctl -eu svmkit-*-validator.service") || {
        Log::error "❌ ${FUNCNAME[0]}: journalctl command failed"
        return 1
    }

    local missing=0
    
    # # check for the “Started …” line
    # if ! grep -q "Started svmkit-.*validator.service" <<<"$Output"; then
    #     log::error "❌ ${FUNCNAME[0]}: Missing ‘Started svmkit-.*.service’ entry"
    #     missing=1
    # fi

    # check for any lines containing INFO
    if ! grep -Eq 'INFO ' <<<"$output"; then
        log::error "❌ ${FUNCNAME[0]}: No 'INFO' line found for svmkit-*-validator.service"
        missing=1
    fi
    
    if [[ $missing -eq 0 ]]; then
        log::info "✅ Journalctl contains an 'INFO' line for svmkit-*-validator.service"
        return 0
    else
        return 1
    fi
}

example::test() {
    (
	local -n config=$1  # name reference (bash 4.3+)
	local example="${config[example]}"
	local stack_name="test-$example"

	# redirect output to file but display any INFO lines to console.
        exec > >(tee "$example.log" | awk '
          {
           # Strip ANSI escape codes for pattern matching
            line = $0

            gsub(/\x1b\[[0-9;]*m/, "", line)
             # Skip lines starting with + or -
            if (line ~ /^[[:space:]]*[+-]/) next
    
             # Print original (colorized) line if it matches INFO or WARN
            if (line ~ /INFO|WARN|ERROR/) print
          }
        ') 2>&1
	log::info "Starting test for $example"
 	log::info "Logging $example output to '$example.log'"

	cd "$SVMKIT_EXAMPLES_DIR/$example"
	log::info "Creating stack '$stack_name'"
	pulumi::run stack init $stack_name  || {
	    log::warn "Stack '$stack_name' already exists"
	}
	
	if [[ -v config[setup] ]]; then
	   setup="${config[setup]}"
	   "$setup"
	fi
	
	pulumi::run config set node:count "$NODE_COUNT"
	pulumi::run preview

	# Bring the stack up
	log::info "Bringing up stack '$stack_name'"
	pulumi::run up  --yes
	
	# 
	log::info "Running tests"
	tmp=$(mktemp)
	testing::run 2>&1 | tee "$tmp"
	if grep -q '^ERROR: ' "$tmp"; then
	    log::error "❌ Some tests failed"
	    exit 1
	else
	    log::info  "✅ All tests passed"
	fi
	rm "$tmp"	
	
	# Bring the stack down
	log::info "Bring down stack '$stack_name'"
	pulumi::run down --yes 

	log::info "Removing stack '$stack_name'"	
	pulumi::run stack rm --yes $stack_name
	
	# Run any cleanup if defined. 
	if [[ -v config[cleanup] ]]; then
	    log::info "cleaning up"
	    cleanup="${config[cleanup]}"
	    "$cleanup"
	fi
	log::info "PASS ${FUNCNAME[1]}"
    )
}

gcloud::check_auth() {
    local account
    account=$(gcloud auth list --filter=status:ACTIVE --format="value(account)")

    if [[ -z "$account" ]]; then
        echo "❌ Not authenticated to Google Cloud."
        return 1
    else
        echo "✅ Authenticated as: $account"
        return 0
    fi
}

print_stack() {
    echo "Stack trace:"
    local i
    for ((i=${#FUNCNAME[@]}-1; i>=1; i--)); do
        echo "  at ${FUNCNAME[$i]} (${BASH_SOURCE[$i]}:${BASH_LINENO[$((i - 1))]})"
    done
}

testing::register example::test::ufw_status_allows_expected_ports
testing::register example::test::journal_logging	

declare -A example_config_ts=(
    ["setup"]=example::setup::ts
    ["node_count"]="$NODE_COUNT"
    ["cleanup"]=example::cleanup::ts
)

declare -A example_config_py=(
    ["setup"]=example::setup::py
    ["node_count"]="$NODE_COUNT"
    ["cleanup"]=example::cleanup::py
)


step::100::test-aws-network-spe-py() {
    (
	example_config_py[example]="aws-network-spe-py"
	example::test example_config_py
    )
}

step::110::test-gcp-network-spe-ts() {
    "$BRING_UP_STACK" || return 0

    (
	gcloud::check_auth
	example_config_ts[example]="gcp-network-spe-ts"
	example::test example_config_ts
    )
}

step::120::test-aws-validator-agave-ts() {
    (
	example_config_ts[example]="aws-validator-agave-ts"
	example::test example_config_ts
    )
}

step::130::test-aws-validator-fd-ts() {
    (
	example_config_ts[example]="aws-validator-fd-ts"
	example::test example_config_ts
	
    )
}

step::140::test-aws-validator-xen-ts() {
    (
	example_config_ts[example]="aws-validator-xen-ts"
	example::test example_config_ts
    )
}

step::150::test-gcp-validator-agave-ts() {
    (
	gcloud::check_auth
	
        local func_name="${FUNCNAME[0]}"
	local example_name="${func_name##*test-}"		
	
	example_config_ts[example]="gcp-validator-agave-ts"
	example::test example_config_ts
    )
}



 
# ----------------------------------------------
# Dispatch: run specific step(s) or all steps
# ----------------------------------------------

# 1) Build a map of step names → full function names
declare -A _step_map=()
_valid_steps=()
while read -r fn; do
  # fn looks like "step::100::foo-bar"
  name="${fn#step::*::}"           # strip "step::<digits>::"
  _step_map["$name"]="$fn"         # map "foo-bar" → "step::100::foo-bar"
  _valid_steps+=( "$name" )
  log::info "Step: $name";
  
done < <(
  declare -F        |  # list all functions
  awk '{print $3}'  |
  grep -E '^step::[0-9]+::'
)

# 2) Decide what to run
if (( $# > 0 )); then
  for step_name in "$@"; do
    fn="${_step_map[$step_name]:-}"
    if [[ -n "$fn" ]]; then
      log::info "▶ Running step '$step_name'"
      $fn
    else
      log::error "❌ No step named '$step_name'"
      log::info  "Valid steps are:"
      for s in "${_valid_steps[@]}"; do
        log::info "  • $s"
      done
      exit 1
    fi
  done
else
  # no args: run all steps in order
  log::info "All Steps: $_step_map";    
  steps::run step
fi
